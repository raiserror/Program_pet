import tkinter as tk
from tkinter import ttk, messagebox
import time
import threading
import pygame
import math
import sys

try:
    import winsound
    HAS_WINSOUND = True
except ImportError:
    HAS_WINSOUND = False
    print("‚ö†Ô∏è winsound –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ Windows —Å–∏—Å—Ç–µ–º–∞)")

class TimerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞")
        self.root.geometry("500x720")
        self.root.minsize(450, 650)
        self.root.configure(bg='#2c3e50')
        
        self.center_window()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame –¥–ª—è –∑–≤—É–∫–∞
        try:
            pygame.mixer.init(frequency=44100, size=-16, channels=2, buffer=512)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤—É–∫–∞: {e}")
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ó–≤—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—É.")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.is_running = False
        self.remaining_time = 0
        self.total_seconds = 0
        self.last_signal_time = 0
        self.signal_check_id = None
        self.beep_sound = HAS_WINSOUND 
        
        # –°—Ç–∏–ª–∏
        self.setup_styles()
        self.setup_ui()
        self.load_sound()
        
        # –ê–Ω–∏–º–∞—Ü–∏—è
        self.animate_progress()
    
    def center_window(self):
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def setup_styles(self):
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('Dark.TFrame', background='#2c3e50')
        style.configure('Dark.TLabel', background='#2c3e50', foreground='#ecf0f1', font=('Segoe UI', 10))
        style.configure('Title.TLabel', background='#2c3e50', foreground='#3498db', font=('Segoe UI', 18, 'bold'))
        style.configure('Time.TLabel', background='#34495e', foreground='#ecf0f1', font=('Consolas', 32, 'bold'))
        style.configure('Small.TLabel', background='#2c3e50', foreground='#bdc3c7', font=('Segoe UI', 9))
        style.configure('Primary.TButton', background='#3498db', foreground='white', font=('Segoe UI', 10, 'bold'))
        style.configure('Success.TButton', background='#27ae60', foreground='white', font=('Segoe UI', 10, 'bold'))
        style.configure('Danger.TButton', background='#e74c3c', foreground='white', font=('Segoe UI', 10, 'bold'))
        style.configure('Warning.TButton', background='#f39c12', foreground='white', font=('Segoe UI', 10, 'bold'))
    
    def setup_ui(self):
        main_container = ttk.Frame(self.root, style='Dark.TFrame', padding="20")
        main_container.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_container, style='Dark.TFrame')
        header_frame.pack(pady=(0, 15))
        
        title_label = ttk.Label(header_frame, text="‚è∞ –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞", style='Title.TLabel')
        title_label.pack()
        
        # –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
        input_frame = ttk.Frame(main_container, style='Dark.TFrame')
        input_frame.pack(pady=15)
        
        time_inputs = [
            ("–ß–∞—Å—ã", "hours", 0, 23),
            ("–ú–∏–Ω—É—Ç—ã", "minutes", 0, 59),
            ("–°–µ–∫—É–Ω–¥—ã", "seconds", 0, 59)
        ]
        
        self.time_vars = {}
        for i, (label_text, name, from_, to) in enumerate(time_inputs):
            frame = ttk.Frame(input_frame, style='Dark.TFrame')
            frame.grid(row=0, column=i, padx=8)
            
            label = ttk.Label(frame, text=label_text, style='Dark.TLabel')
            label.pack()
            
            var = tk.StringVar(value="0" if name != "seconds" else "30")
            self.time_vars[name] = var
            
            spinbox = ttk.Spinbox(frame, from_=from_, to=to, width=8,
                                 textvariable=var, font=('Segoe UI', 11),
                                 justify='center')
            spinbox.pack(pady=4)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_frame = ttk.Frame(main_container, style='Dark.TFrame')
        signal_frame.pack(pady=15)
        
        ttk.Label(signal_frame, text="üîî –°–∏–≥–Ω–∞–ª –∫–∞–∂–¥—ã–µ:", style='Dark.TLabel').pack()
        
        signal_input_frame = ttk.Frame(signal_frame, style='Dark.TFrame')
        signal_input_frame.pack(pady=5)
        
        self.signal_interval_var = tk.StringVar(value="10")
        self.signal_unit_var = tk.StringVar(value="seconds")
        
        self.signal_spin = ttk.Spinbox(signal_input_frame, from_=1, to=3600, width=8,
                                      textvariable=self.signal_interval_var, 
                                      font=('Segoe UI', 11), justify='center')
        self.signal_spin.pack(side=tk.LEFT, padx=5)
        
        self.unit_combo = ttk.Combobox(signal_input_frame, width=8,
                                      textvariable=self.signal_unit_var,
                                      font=('Segoe UI', 11), state="readonly")
        self.unit_combo['values'] = ('seconds', 'minutes')
        self.unit_combo.pack(side=tk.LEFT, padx=5)
        self.unit_combo.set('seconds')
        
        ttk.Label(signal_input_frame, text="(0 = —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ)", style='Small.TLabel').pack(side=tk.LEFT, padx=10)
        
        # –î–∏—Å–ø–ª–µ–π —Ç–∞–π–º–µ—Ä–∞
        display_frame = ttk.Frame(main_container, style='Dark.TFrame')
        display_frame.pack(pady=20)
        
        self.canvas = tk.Canvas(display_frame, width=200, height=200, 
                               bg='#34495e', highlightthickness=0)
        self.canvas.pack()
        
        self.time_display = ttk.Label(display_frame, text="00:00:00", 
                                     style='Time.TLabel', background='#34495e')
        self.time_display.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(main_container, style='Dark.TFrame')
        button_frame.pack(pady=15)
        
        self.start_button = ttk.Button(button_frame, text="‚ñ∂ –°—Ç–∞—Ä—Ç", 
                                      command=self.start_timer, style='Success.TButton')
        self.pause_button = ttk.Button(button_frame, text="‚è∏ –ü–∞—É–∑–∞", 
                                      command=self.pause_timer, style='Warning.TButton', state=tk.DISABLED)
        self.reset_button = ttk.Button(button_frame, text="‚Ü∫ –°–±—Ä–æ—Å", 
                                      command=self.reset_timer, style='Primary.TButton')
        self.stop_button = ttk.Button(button_frame, text="‚èπ –°—Ç–æ–ø", 
                                     command=self.stop_timer, style='Danger.TButton', state=tk.DISABLED)
        
        buttons = [self.start_button, self.pause_button, self.reset_button, self.stop_button]
        for i, button in enumerate(buttons):
            button.grid(row=0, column=i, padx=4, pady=4)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        status_frame = ttk.Frame(main_container, style='Dark.TFrame')
        status_frame.pack(side=tk.BOTTOM, fill=tk.X, pady=10)
        
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(status_frame, textvariable=self.status_var, 
                              style='Dark.TLabel', foreground='#bdc3c7')
        status_bar.pack()
        
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(status_frame, variable=self.progress_var,
                                           maximum=100, style='Dark.Horizontal.TProgressbar')
        self.progress_bar.pack(fill=tk.X, pady=5)
    
    def get_signal_interval_seconds(self):
        try:
            interval = int(self.signal_interval_var.get())
            unit = self.signal_unit_var.get()
            
            if interval == 0:
                return 0
                
            if unit == "minutes":
                return interval * 60
            else:
                return interval
                
        except ValueError:
            return 10
    
    def draw_progress_circle(self, progress):
        self.canvas.delete("all")
        self.canvas.create_oval(10, 10, 190, 190, outline='#7f8c8d', width=3, fill='#2c3e50')
        
        if progress > 0:
            self.canvas.create_arc(10, 10, 190, 190, 
                                  start=90, 
                                  extent=-360 * progress,
                                  outline='#3498db', 
                                  width=5, 
                                  style=tk.ARC)
        
        self.canvas.create_oval(50, 50, 150, 150, outline='#34495e', width=2, fill='#34495e')
    
    def animate_progress(self):
        if self.is_running and self.total_seconds > 0:
            progress = 1 - (self.remaining_time / self.total_seconds)
            self.draw_progress_circle(progress)
            self.progress_var.set(progress * 100)
        
        self.root.after(100, self.animate_progress)
    
    def load_sound(self):
        """–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π beep"""
        try:
            self.beep_sound = True  # –ü—Ä–æ—Å—Ç–æ —Ñ–ª–∞–≥ —á—Ç–æ –∑–≤—É–∫ –¥–æ—Å—Ç—É–ø–µ–Ω
        except:
            self.beep_sound = None
            print("‚ö†Ô∏è –ó–≤—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    def play_sound(self, sound_type="normal"):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏—è—Ç–Ω—ã—Ö –∑–≤—É–∫–æ–≤ —á–µ—Ä–µ–∑ winsound"""
        if self.beep_sound and HAS_WINSOUND:
            try:
                if sound_type == "interval":
                    tones = [523, 659, 784]  # C5, E5, G5 (–º–∞–∂–æ—Ä–Ω–æ–µ —Ç—Ä–µ–∑–≤—É—á–∏–µ)
                    for tone in tones:
                        winsound.Beep(tone, 150)
                        time.sleep(0.05)
                    self.status_var.set(f"üîî –°–∏–≥–Ω–∞–ª! –û—Å—Ç–∞–ª–æ—Å—å: {self.remaining_time} —Å–µ–∫")
                    
                else:
                    tones = [784, 698, 659, 587, 523, 494, 440, 392]  # G5 –¥–æ G4 –Ω–∏—Å—Ö–æ–¥—è—â–∞—è –≥–∞–º–º–∞
                    for tone in tones:
                        winsound.Beep(tone, 200)
                        time.sleep(0.03)
                    self.status_var.set("üéâ –í—Ä–µ–º—è –≤—ã—à–ª–æ!")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
                self.flash_window()
        else:
            print("‚ö†Ô∏è –ó–≤—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è")
            self.flash_window()
    
    def flash_window(self):
        """–ú–∏–≥–∞–Ω–∏–µ –æ–∫–Ω–∞ –µ—Å–ª–∏ –∑–≤—É–∫–∞ –Ω–µ—Ç"""
        original_color = self.root.cget("bg")
        for _ in range(3):
            self.root.configure(bg="#3498db")
            self.root.update()
            time.sleep(0.2)
            self.root.configure(bg=original_color)
            self.root.update()
            time.sleep(0.2)
    
    def check_signal_interval(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if not self.is_running:
            return
            
        interval_seconds = self.get_signal_interval_seconds()
        
        # –†–µ–∂–∏–º "—Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ"
        if interval_seconds == 0:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        elapsed = self.total_seconds - self.remaining_time
        if elapsed >= self.last_signal_time + interval_seconds:
            self.last_signal_time = elapsed
            self.play_sound("interval")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å
        if self.is_running:
            self.signal_check_id = self.root.after(1000, self.check_signal_interval)
    
    def update_display(self):
        hours = self.remaining_time // 3600
        minutes = (self.remaining_time % 3600) // 60
        seconds = self.remaining_time % 60
        time_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        self.time_display.config(text=time_str)
        
        if self.remaining_time <= 10 and self.remaining_time > 0:
            self.time_display.config(foreground='#e74c3c')
        elif self.remaining_time == 0:
            self.time_display.config(foreground='#27ae60')
        else:
            self.time_display.config(foreground='#3498db')
    
    def start_timer(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä"""
        if not self.is_running:
            try:
                hours = int(self.time_vars['hours'].get())
                minutes = int(self.time_vars['minutes'].get())
                seconds = int(self.time_vars['seconds'].get())
                
                self.total_seconds = hours * 3600 + minutes * 60 + seconds
                
                if self.total_seconds <= 0:
                    messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!")
                    return
                
                self.remaining_time = self.total_seconds
                self.is_running = True
                self.last_signal_time = 0
                
                self.update_buttons_state()
                self.status_var.set("‚è∞ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω")
                self.draw_progress_circle(0)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
                self.check_signal_interval()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä
                self.timer_thread = threading.Thread(target=self.run_timer, daemon=True)
                self.timer_thread.start()
                
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!")
    
    def run_timer(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–∞–π–º–µ—Ä–∞"""
        while self.remaining_time > 0 and self.is_running:
            time.sleep(1)
            if self.is_running:
                self.remaining_time -= 1
                self.root.after(0, self.update_display)
        
        if self.remaining_time == 0 and self.is_running:
            self.root.after(0, self.timer_finished)
    
    def pause_timer(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä"""
        self.is_running = not self.is_running
        if self.is_running:
            self.pause_button.config(text="‚è∏ –ü–∞—É–∑–∞")
            self.status_var.set("‚ñ∂ –¢–∞–π–º–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω")
            self.check_signal_interval()
            self.timer_thread = threading.Thread(target=self.run_timer, daemon=True)
            self.timer_thread.start()
        else:
            self.pause_button.config(text="‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
            self.status_var.set("‚è∏ –¢–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑–µ")
            if self.signal_check_id:
                self.root.after_cancel(self.signal_check_id)
    
    def reset_timer(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä"""
        self.stop_timer()
        self.remaining_time = self.total_seconds
        self.update_display()
        self.draw_progress_circle(0)
        self.status_var.set("‚Ü∫ –¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω")
    
    def stop_timer(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä"""
        self.is_running = False
        if self.signal_check_id:
            self.root.after_cancel(self.signal_check_id)
        self.update_buttons_state()
        self.status_var.set("‚èπ –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def timer_finished(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞"""
        self.is_running = False
        if self.signal_check_id:
            self.root.after_cancel(self.signal_check_id)
        
        self.play_sound("end")
        self.update_buttons_state()
        self.status_var.set("üéâ –í—Ä–µ–º—è –≤—ã—à–ª–æ!")
        self.draw_progress_circle(1.0)
        
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ!", "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!\n\n–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç.")
    
    def update_buttons_state(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫"""
        if self.is_running:
            self.start_button.config(state=tk.DISABLED)
            self.pause_button.config(state=tk.NORMAL)
            self.reset_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.NORMAL)
        else:
            self.start_button.config(state=tk.NORMAL)
            self.pause_button.config(state=tk.DISABLED)
            self.reset_button.config(state=tk.NORMAL if self.total_seconds > 0 else tk.DISABLED)
            self.stop_button.config(state=tk.DISABLED)

def main():
    root = tk.Tk()
    app = TimerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()